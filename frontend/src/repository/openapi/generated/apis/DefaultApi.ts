/* tslint:disable */
/* eslint-disable */
/**
 * kottage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  Admin,
  AdminsGetResponse,
  Comment,
  Comments,
  CommentsPostRequest,
  Entries,
  EntriesPostRequest,
  EntriesSerialNumberPatchRequest,
  Entry,
  Error400,
  Error401,
  Error403,
  Error4031,
  Error404,
  Error409,
  Health,
  SignInPostRequest,
  User,
  UserDetail,
  Users,
  UsersIdPatchRequest,
  UsersPostRequest,
} from '../models/index'
import {
  AdminFromJSON,
  AdminToJSON,
  AdminsGetResponseFromJSON,
  AdminsGetResponseToJSON,
  CommentFromJSON,
  CommentToJSON,
  CommentsFromJSON,
  CommentsToJSON,
  CommentsPostRequestFromJSON,
  CommentsPostRequestToJSON,
  EntriesFromJSON,
  EntriesToJSON,
  EntriesPostRequestFromJSON,
  EntriesPostRequestToJSON,
  EntriesSerialNumberPatchRequestFromJSON,
  EntriesSerialNumberPatchRequestToJSON,
  EntryFromJSON,
  EntryToJSON,
  Error400FromJSON,
  Error400ToJSON,
  Error401FromJSON,
  Error401ToJSON,
  Error403FromJSON,
  Error403ToJSON,
  Error4031FromJSON,
  Error4031ToJSON,
  Error404FromJSON,
  Error404ToJSON,
  Error409FromJSON,
  Error409ToJSON,
  HealthFromJSON,
  HealthToJSON,
  SignInPostRequestFromJSON,
  SignInPostRequestToJSON,
  UserFromJSON,
  UserToJSON,
  UserDetailFromJSON,
  UserDetailToJSON,
  UsersFromJSON,
  UsersToJSON,
  UsersIdPatchRequestFromJSON,
  UsersIdPatchRequestToJSON,
  UsersPostRequestFromJSON,
  UsersPostRequestToJSON,
} from '../models/index'

export interface CommentsGetRequest {
  limit?: number
  offset?: number
}

export interface EntriesGetRequest {
  limit?: number
  offset?: number
}

export interface EntriesPostOperationRequest {
  entriesPostRequest: EntriesPostRequest
}

export interface EntriesSerialNumberCommentsCommentIdDeleteRequest {
  serialNumber: number
  commentId: number
}

export interface EntriesSerialNumberCommentsGetRequest {
  serialNumber: number
  limit?: number
  offset?: number
}

export interface EntriesSerialNumberCommentsPostRequest {
  serialNumber: number
  commentsPostRequest: CommentsPostRequest
}

export interface EntriesSerialNumberDeleteRequest {
  serialNumber: number
}

export interface EntriesSerialNumberGetRequest {
  serialNumber: number
}

export interface EntriesSerialNumberPatchOperationRequest {
  serialNumber: number
  entriesSerialNumberPatchRequest: EntriesSerialNumberPatchRequest
}

export interface SignInPostOperationRequest {
  signInPostRequest: SignInPostRequest
}

export interface UsersAdminsDeleteRequest {
  admin: Admin
}

export interface UsersAdminsPatchRequest {
  admin: Admin
}

export interface UsersIdDeleteRequest {
  id: number
}

export interface UsersIdGetRequest {
  id: number
}

export interface UsersIdPatchOperationRequest {
  id: number
  usersIdPatchRequest: UsersIdPatchRequest
}

export interface UsersPostOperationRequest {
  usersPostRequest: UsersPostRequest
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * get comments
   */
  async commentsGetRaw(
    requestParameters: CommentsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Comments>> {
    const queryParameters: any = {}

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/comments`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommentsFromJSON(jsonValue),
    )
  }

  /**
   * get comments
   */
  async commentsGet(
    requestParameters: CommentsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Comments> {
    const response = await this.commentsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * get entries
   */
  async entriesGetRaw(
    requestParameters: EntriesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Entries>> {
    const queryParameters: any = {}

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/entries`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntriesFromJSON(jsonValue),
    )
  }

  /**
   * get entries
   */
  async entriesGet(
    requestParameters: EntriesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Entries> {
    const response = await this.entriesGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * create a new entry
   */
  async entriesPostRaw(
    requestParameters: EntriesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Entry>> {
    if (requestParameters['entriesPostRequest'] == null) {
      throw new runtime.RequiredError(
        'entriesPostRequest',
        'Required parameter "entriesPostRequest" was null or undefined when calling entriesPost().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/entries`

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EntriesPostRequestToJSON(requestParameters['entriesPostRequest']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntryFromJSON(jsonValue),
    )
  }

  /**
   * create a new entry
   */
  async entriesPost(
    requestParameters: EntriesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Entry> {
    const response = await this.entriesPostRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * delete a comment with entry
   */
  async entriesSerialNumberCommentsCommentIdDeleteRaw(
    requestParameters: EntriesSerialNumberCommentsCommentIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberCommentsCommentIdDelete().',
      )
    }

    if (requestParameters['commentId'] == null) {
      throw new runtime.RequiredError(
        'commentId',
        'Required parameter "commentId" was null or undefined when calling entriesSerialNumberCommentsCommentIdDelete().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/entries/{serialNumber}/comments/{commentId}`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )
    urlPath = urlPath.replace(
      `{${'commentId'}}`,
      encodeURIComponent(String(requestParameters['commentId'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * delete a comment with entry
   */
  async entriesSerialNumberCommentsCommentIdDelete(
    requestParameters: EntriesSerialNumberCommentsCommentIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.entriesSerialNumberCommentsCommentIdDeleteRaw(
      requestParameters,
      initOverrides,
    )
  }

  /**
   * get comments with entry
   */
  async entriesSerialNumberCommentsGetRaw(
    requestParameters: EntriesSerialNumberCommentsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Comments>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberCommentsGet().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/entries/{serialNumber}/comments`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommentsFromJSON(jsonValue),
    )
  }

  /**
   * get comments with entry
   */
  async entriesSerialNumberCommentsGet(
    requestParameters: EntriesSerialNumberCommentsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Comments> {
    const response = await this.entriesSerialNumberCommentsGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * create a new comment to an entry
   */
  async entriesSerialNumberCommentsPostRaw(
    requestParameters: EntriesSerialNumberCommentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Comment>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberCommentsPost().',
      )
    }

    if (requestParameters['commentsPostRequest'] == null) {
      throw new runtime.RequiredError(
        'commentsPostRequest',
        'Required parameter "commentsPostRequest" was null or undefined when calling entriesSerialNumberCommentsPost().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/entries/{serialNumber}/comments`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CommentsPostRequestToJSON(
          requestParameters['commentsPostRequest'],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CommentFromJSON(jsonValue),
    )
  }

  /**
   * create a new comment to an entry
   */
  async entriesSerialNumberCommentsPost(
    requestParameters: EntriesSerialNumberCommentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Comment> {
    const response = await this.entriesSerialNumberCommentsPostRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * delete the entry
   */
  async entriesSerialNumberDeleteRaw(
    requestParameters: EntriesSerialNumberDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberDelete().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/entries/{serialNumber}`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * delete the entry
   */
  async entriesSerialNumberDelete(
    requestParameters: EntriesSerialNumberDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.entriesSerialNumberDeleteRaw(requestParameters, initOverrides)
  }

  /**
   * get the entry
   */
  async entriesSerialNumberGetRaw(
    requestParameters: EntriesSerialNumberGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Entry>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberGet().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/entries/{serialNumber}`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntryFromJSON(jsonValue),
    )
  }

  /**
   * get the entry
   */
  async entriesSerialNumberGet(
    requestParameters: EntriesSerialNumberGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Entry> {
    const response = await this.entriesSerialNumberGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * update the entry
   */
  async entriesSerialNumberPatchRaw(
    requestParameters: EntriesSerialNumberPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Entry>> {
    if (requestParameters['serialNumber'] == null) {
      throw new runtime.RequiredError(
        'serialNumber',
        'Required parameter "serialNumber" was null or undefined when calling entriesSerialNumberPatch().',
      )
    }

    if (requestParameters['entriesSerialNumberPatchRequest'] == null) {
      throw new runtime.RequiredError(
        'entriesSerialNumberPatchRequest',
        'Required parameter "entriesSerialNumberPatchRequest" was null or undefined when calling entriesSerialNumberPatch().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/entries/{serialNumber}`
    urlPath = urlPath.replace(
      `{${'serialNumber'}}`,
      encodeURIComponent(String(requestParameters['serialNumber'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: EntriesSerialNumberPatchRequestToJSON(
          requestParameters['entriesSerialNumberPatchRequest'],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntryFromJSON(jsonValue),
    )
  }

  /**
   * update the entry
   */
  async entriesSerialNumberPatch(
    requestParameters: EntriesSerialNumberPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Entry> {
    const response = await this.entriesSerialNumberPatchRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * get current server status
   */
  async healthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/health`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthFromJSON(jsonValue),
    )
  }

  /**
   * get current server status
   */
  async healthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Health> {
    const response = await this.healthGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * sign in as a user
   */
  async signInPostRaw(
    requestParameters: SignInPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetail>> {
    if (requestParameters['signInPostRequest'] == null) {
      throw new runtime.RequiredError(
        'signInPostRequest',
        'Required parameter "signInPostRequest" was null or undefined when calling signInPost().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/sign-in`

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SignInPostRequestToJSON(requestParameters['signInPostRequest']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDetailFromJSON(jsonValue),
    )
  }

  /**
   * sign in as a user
   */
  async signInPost(
    requestParameters: SignInPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetail> {
    const response = await this.signInPostRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * sign out from current user
   */
  async signOutPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/sign-out`

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * sign out from current user
   */
  async signOutPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.signOutPostRaw(initOverrides)
  }

  /**
   * delete a user from admin
   */
  async usersAdminsDeleteRaw(
    requestParameters: UsersAdminsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['admin'] == null) {
      throw new runtime.RequiredError(
        'admin',
        'Required parameter "admin" was null or undefined when calling usersAdminsDelete().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/users/admins`

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: AdminToJSON(requestParameters['admin']),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * delete a user from admin
   */
  async usersAdminsDelete(
    requestParameters: UsersAdminsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.usersAdminsDeleteRaw(requestParameters, initOverrides)
  }

  /**
   * get admins
   */
  async usersAdminsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AdminsGetResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/users/admins`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AdminsGetResponseFromJSON(jsonValue),
    )
  }

  /**
   * get admins
   */
  async usersAdminsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AdminsGetResponse> {
    const response = await this.usersAdminsGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * make a user as admin
   */
  async usersAdminsPatchRaw(
    requestParameters: UsersAdminsPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['admin'] == null) {
      throw new runtime.RequiredError(
        'admin',
        'Required parameter "admin" was null or undefined when calling usersAdminsPatch().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/users/admins`

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: AdminToJSON(requestParameters['admin']),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * make a user as admin
   */
  async usersAdminsPatch(
    requestParameters: UsersAdminsPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.usersAdminsPatchRaw(requestParameters, initOverrides)
  }

  /**
   * get
   */
  async usersCurrentGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetail>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/users/current`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDetailFromJSON(jsonValue),
    )
  }

  /**
   * get
   */
  async usersCurrentGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetail> {
    const response = await this.usersCurrentGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * get users
   */
  async usersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Users>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/users`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UsersFromJSON(jsonValue),
    )
  }

  /**
   * get users
   */
  async usersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Users> {
    const response = await this.usersGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * delete current user
   */
  async usersIdDeleteRaw(
    requestParameters: UsersIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling usersIdDelete().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/users/{id}`
    urlPath = urlPath.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters['id'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * delete current user
   */
  async usersIdDelete(
    requestParameters: UsersIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.usersIdDeleteRaw(requestParameters, initOverrides)
  }

  /**
   * get a user
   */
  async usersIdGetRaw(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetail>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling usersIdGet().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    let urlPath = `/users/{id}`
    urlPath = urlPath.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters['id'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDetailFromJSON(jsonValue),
    )
  }

  /**
   * get a user
   */
  async usersIdGet(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetail> {
    const response = await this.usersIdGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * update current user
   */
  async usersIdPatchRaw(
    requestParameters: UsersIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling usersIdPatch().',
      )
    }

    if (requestParameters['usersIdPatchRequest'] == null) {
      throw new runtime.RequiredError(
        'usersIdPatchRequest',
        'Required parameter "usersIdPatchRequest" was null or undefined when calling usersIdPatch().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/users/{id}`
    urlPath = urlPath.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters['id'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UsersIdPatchRequestToJSON(
          requestParameters['usersIdPatchRequest'],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    )
  }

  /**
   * update current user
   */
  async usersIdPatch(
    requestParameters: UsersIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.usersIdPatchRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * create a user
   */
  async usersPostRaw(
    requestParameters: UsersPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetail>> {
    if (requestParameters['usersPostRequest'] == null) {
      throw new runtime.RequiredError(
        'usersPostRequest',
        'Required parameter "usersPostRequest" was null or undefined when calling usersPost().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    let urlPath = `/users`

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UsersPostRequestToJSON(requestParameters['usersPostRequest']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDetailFromJSON(jsonValue),
    )
  }

  /**
   * create a user
   */
  async usersPost(
    requestParameters: UsersPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetail> {
    const response = await this.usersPostRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
