/* tslint:disable */
/* eslint-disable */
/**
 * kottage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { ErrorCause } from './ErrorCause'
import {
  ErrorCauseFromJSON,
  ErrorCauseFromJSONTyped,
  ErrorCauseToJSON,
  ErrorCauseToJSONTyped,
} from './ErrorCause'
import type { Error403Cause } from './Error403Cause'
import {
  Error403CauseFromJSON,
  Error403CauseFromJSONTyped,
  Error403CauseToJSON,
  Error403CauseToJSONTyped,
} from './Error403Cause'

/**
 *
 * @export
 * @interface Error4031
 */
export interface Error4031 {
  /**
   *
   * @type {number}
   * @memberof Error4031
   */
  status: Error4031StatusEnum
  /**
   *
   * @type {string}
   * @memberof Error4031
   */
  description: Error4031DescriptionEnum
  /**
   *
   * @type {Error403Cause}
   * @memberof Error4031
   */
  cause?: Error403Cause
}

/**
 * @export
 */
export const Error4031StatusEnum = {
  NUMBER_403: 403,
} as const
export type Error4031StatusEnum =
  (typeof Error4031StatusEnum)[keyof typeof Error4031StatusEnum]

/**
 * @export
 */
export const Error4031DescriptionEnum = {
  Forbidden: 'Forbidden',
} as const
export type Error4031DescriptionEnum =
  (typeof Error4031DescriptionEnum)[keyof typeof Error4031DescriptionEnum]

/**
 * Check if a given object implements the Error4031 interface.
 */
export function instanceOfError4031(value: object): value is Error4031 {
  if (!('status' in value) || value['status'] === undefined) return false
  if (!('description' in value) || value['description'] === undefined)
    return false
  return true
}

export function Error4031FromJSON(json: any): Error4031 {
  return Error4031FromJSONTyped(json, false)
}

export function Error4031FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Error4031 {
  if (json == null) {
    return json
  }
  return {
    status: json['status'],
    description: json['description'],
    cause:
      json['cause'] == null ? undefined : Error403CauseFromJSON(json['cause']),
  }
}

export function Error4031ToJSON(json: any): Error4031 {
  return Error4031ToJSONTyped(json, false)
}

export function Error4031ToJSONTyped(
  value?: Error4031 | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    status: value['status'],
    description: value['description'],
    cause: Error403CauseToJSON(value['cause']),
  }
}
