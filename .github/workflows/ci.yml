name: CI

on: [pull_request]

jobs:
  check_changes:
    name: Check file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'api-spec/**'
              - '.github/workflows/**'
            frontend:
              - 'frontend/**'
              - 'api-spec/**'
              - '.github/workflows/**'

  backend_lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    needs: check_changes
    if: ${{ needs.check_changes.outputs.backend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Lint Code Base
        uses: github/super-linter/slim@v7
        env:
          FILTER_REGEX_EXCLUDE: (gradlew|frontend/)
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_EDITORCONFIG: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GROOVY: true
          VALIDATE_JSON: true
          VALIDATE_KOTLIN: true
          VALIDATE_MARKDOWN: true
          VALIDATE_OPENAPI: true
          VALIDATE_SHELL_SHFMT: true
          OPENAPI_CONFIG_FILE: .redocly.yaml
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  backend_test:
    name: Backend Test
    runs-on: ubuntu-latest
    needs: check_changes
    if: ${{ needs.check_changes.outputs.backend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v5
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Prepare env
        working-directory: backend
        run: |
          mv .ci.env .env
          mv .ci.db-env .db-env
      - name: Start database services first
        working-directory: backend
        run: |
          echo "Starting database and redis services..."
          docker compose up -d db redis
          echo "Waiting for database to be ready..."
          sleep 10
          docker compose ps
      - name: Run Server
        working-directory: backend
        run: |
          echo "Building and starting web application..."
          ./gradlew clean installDist
          docker compose build web
          docker compose up -d web
          echo "All services started"
      - name: Show Docker container status and logs
        working-directory: backend
        run: |
          echo "Waiting 10 seconds for application to start..."
          sleep 10
          echo "=== Docker daemon status ==="
          docker version
          echo "=== All containers ==="
          docker ps -a
          echo "=== Compose project containers ==="
          docker compose ps -a
          echo "=== Container logs ==="
          echo "--- DB logs ---"
          docker compose logs db --tail 50 || echo "No db logs available"
          echo "--- Redis logs ---"
          docker compose logs redis --tail 20 || echo "No redis logs available"
          echo "--- Web logs ---"
          docker compose logs web --tail 100 || echo "No web logs available"
      - name: Verify application is accessible
        working-directory: backend
        run: |
          echo "Testing application endpoint..."
          curl -f http://0.0.0.0:8080/api/v1/health || {
            echo "Application health check failed!"
            exit 1
          }
      - name: Run Test
        working-directory: backend
        run: ./gradlew test --info --debug --stacktrace
      # 失敗したテストの詳細ログを出力
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/build/test-results/

  frontend_test:
    name: Frontend Test
    runs-on: ubuntu-latest
    needs: check_changes
    if: ${{ needs.check_changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v6
        with:
          node-version: '23'
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'
      - name: git setting
        run: |
          git config --local user.email "10195648+hmiyado@users.noreply.github.com"
          git config --local user.name "hmiyado"
      - name: Install dependencies
        working-directory: frontend
        run: yarn
      - name: Update patch package
        working-directory: frontend
        env:
          SOURCE_BRANCH: ${{ github.head_ref }}
        run: sh scripts/update-patch-package.sh
      - name: Verify OpenAPI client
        working-directory: frontend
        run: sh scripts/verify-openapi-client.sh
      - name: Run lint
        working-directory: frontend
        run: yarn lint
      - name: Run tests
        working-directory: frontend
        run: yarn test