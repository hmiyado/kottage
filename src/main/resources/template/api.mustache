{{>licenseInfo}}
package {{apiPackage}}

import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import {{packageName}}.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import io.ktor.util.pipeline.PipelineContext
import io.ktor.request.receive
import kotlinx.serialization.SerializationException
{{#imports}}import {{import}}
{{/imports}}

{{#featureLocations}}
@KtorExperimentalLocationsAPI
{{/featureLocations}}
// this file overrides default template.
// default template is below.
// https://github.com/OpenAPITools/openapi-generator/blob/463d905664498ac0c4006a4b888c39c9359dbcba/modules/openapi-generator/src/main/resources/kotlin-server/libraries/ktor/api.mustache
object OpenApi {
    class RequestBodyUnrecognizableException(override val cause: Throwable?) : SerializationException(cause)

    @Throws(RequestBodyUnrecognizableException::class)
    private suspend inline fun <reified T : Any> ApplicationCall.receiveOrThrow(): T {
        return try {
            receive<T>()
        } catch (e: SerializationException) {
            throw RequestBodyUnrecognizableException(e)
        }
    }

{{#operations}}
    {{#operation}}
        {{#bodyParam.dataType}}
            fun Route.{{operationId}}(handler: suspend PipelineContext<Unit, ApplicationCall>.(payload: {{bodyParam.dataType}})-> Unit) {
            {{#hasAuthMethods}}
                {{#authMethods}}
                    authenticate("{{{name}}}") {
                {{/authMethods}}
            {{/hasAuthMethods}}
            {{#featureLocations}}
                {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(Paths.{{operationId}}) {
                val payload = call.receiveOrThrow<{{bodyParam.dataType}}>()
                handler(payload)
                }
            {{/featureLocations}}
            {{#hasAuthMethods}}
                }
            {{/hasAuthMethods}}
            }
        {{/bodyParam.dataType}}
        {{^bodyParam.dataType}}
            fun Route.{{operationId}}(handler: suspend PipelineContext<Unit, ApplicationCall>.()-> Unit) {
            {{#hasAuthMethods}}
                {{#authMethods}}
                    authenticate("{{{name}}}") {
                {{/authMethods}}
            {{/hasAuthMethods}}
            {{#featureLocations}}
                {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(Paths.{{operationId}}) {
                handler()
                }
            {{/featureLocations}}
            {{#hasAuthMethods}}
                }
            {{/hasAuthMethods}}
            }
        {{/bodyParam.dataType}}
    {{/operation}}
{{/operations}}
}
